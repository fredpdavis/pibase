=head1 NAME

pibase::create_raw_table_specs - module to create perl code with PIBASE db strx

=head1 DESCRIPTION

Parses (My)SQL CREATE TABLE statements and displays perl code that defines table structure

=head1 AUTHOR

Fred P. Davis, HHMI-JFRC (davisf@janelia.hhmi.org)

=head1 LICENCE AND COPYRIGHT

Copyright 2005,2010 Fred P. Davis (davisf@janelia.hhmi.org).
See the file COPYING for copying permission.

This file is part of PIBASE.

PIBASE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PIBASE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with PIBASE.  If not, see <http://www.gnu.org/licenses/>.

=cut

package pibase::create_raw_table_specs ;
use strict;
use warnings;
use Exporter;
our @ISA = qw/Exporter/ ;
our @EXPORT = qw/create_raw_table_specs/ ;

use pibase qw/timestamp/;

=head2 create_raw_table_specs()

   Title:       create_raw_table_specs
   Function:    Creates perl code with PIBASE database structure
   STDIN:       (My)SQL CREATE TABLE statements (from dia2mysql)
   STDOUT:      raw_table_specs.pm perl module with hardcoded db structure

=cut

sub create_raw_table_specs {
   my $tables ;

   my $pibase = 'pibase';

   my $curtable = 0 ;
   while (my $line = <STDIN>) {
      if ($line !~ /^#/ && $line !~ /^$/) {
         chomp $line;
         if ($line =~ /^CREATE TABLE/) {
	    ($curtable) = ($line =~ /^CREATE TABLE (.+) \(/) ;
	    ($tables->{$curtable}->{name}) = $curtable ;
	 } elsif ($line =~ /\);/) {
	    $curtable = '' ;
         } else {
	    if ($line =~ /^\s*PRIMARY KEY/) {
	       $line =~ s/\,$// ;
	       ($tables->{$curtable}->{prikey}) = ($line =~ /^\s*PRIMARY KEY (.+)$/);
	    } else {
	       $line =~ s/\,$// ;
	       my ($fieldname, $spec) = ($line =~ /(\S+)\s+(.+)$/) ;
	       push @{$tables->{$curtable}->{field_name}}, $fieldname ;
	       push @{$tables->{$curtable}->{field_spec}}, $spec;
	    }
	 }
      }
   }

   print  '=head1 NAME

pibase::raw_table_specs- module that specifies pibase table structures

=head1 VERSION

' ;

   print "fpd".pibase::timestamp()."\n\n" ;

print '=head1 DESCRIPTION

The raw_table_specs module contains a hard-coded description of the PIBASE
table structures. This file is automatically generated by the
pibase::create_raw_table_specs

=head1 AUTHOR

Fred P. Davis, HHMI-JFRC (davisf@janelia.hhmi.org)

=head1 LICENCE AND COPYRIGHT

Copyright 2005,2008 Fred P. Davis (davisf@janelia.hhmi.org).
See the file COPYING for copying permission.

This file is part of PIBASE.

PIBASE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PIBASE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with PIBASE.  If not, see <http://www.gnu.org/licenses/>.


=head1 SUBROUTINES

=cut

' ;

print 'package '.$pibase.'::raw_table_specs ;'."\n" ;
print 'use strict ;
use warnings ;
use Exporter;
my @ISA = qw/Exporter/ ;
my @EXPORT = qw/full_table_specs/ ;

=head2 full_table_specs()

   Title:       full_table_specs()
   Args:        none
   Returns:     $->{table_name}->{prikey} = primary key field
                $->{table_name}->{field_name}->[i] = name of ith field
                $->{table_name}->{field_spec}->[i] = type of ith field

=cut

' ;

   print "sub full_table_specs {"."\n\n" ;
   print '   my $tables'." ;\n" ;
   foreach my $j ( keys %{$tables}) {
      if (exists $tables->{$j}->{prikey}) {
         print '   $tables->{'.$j.'}->{prikey} = "'.$tables->{$j}->{prikey}."\" ;\n" ;}
      foreach my $k ( 0 .. $#{$tables->{$j}->{field_name}} ) {
	 print '   $tables->{'.$j.'}->{field_name}->['.$k.'] = "'.$tables->{$j}->{field_name}->[$k]."\" ;\n" ;
	 print '   $tables->{'.$j.'}->{field_spec}->['.$k.'] = "'.$tables->{$j}->{field_spec}->[$k]."\" ;\n" ;
      }
   }
   print "\n" ;
   print '   return $tables ;'."\n" ;
   print "}\n" ;
   print "\n" ;
   print "1 ;\n" ;

}

1 ;
